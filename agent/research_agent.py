import os
import sys
from dotenv import load_dotenv
load_dotenv()

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from autogen import AssistantAgent, UserProxyAgent, register_function
from agent.agent_evaluation import evaluate_response
from config import MISTRAL_LLM_CONFIG, OPENAI_LLM_CONFIG
from tools.product_search import search_products

# Valutakonvertering ‚Äì kan udvides til EUR m.m.
def usd_to_dkk(usd):
    try:
        return round(float(usd) * 7.0)  # Ret evt. kursen til aktuel (fx 7,0 for USD‚ÜíDKK)
    except Exception:
        return None

def format_products(products: list) -> str:
    if not products:
        return "Ingen produkter fundet."
    formatted = []
    for i, p in enumerate(products, 1):
        pris = p.get('price', '-')
        dkk_info = ""
        if pris and isinstance(pris, str) and pris.strip().startswith('$'):
            usd = pris.strip().replace('$','').replace(',','')
            dkk = usd_to_dkk(usd)
            if dkk:
                dkk_info = f" (ca. {dkk} kr)"
        # Tilf√∏j evt. flere valutatyper her (EUR, GBP etc.)
        formatted.append(
            f"{i}. üì¶ {p.get('title', 'Ukendt')}\n"
            f"   üí∞ Pris: {pris}{dkk_info}\n"
            f"   üè™ Butik: {p.get('store', '-')}\n"
            f"   üîó Link: {p.get('link', '-')}\n"
        )
    return "\n".join(formatted)

def format_evaluation(evaluation: dict) -> str:
    if "error" in evaluation:
        return f"Fejl i evaluering: {evaluation['error']}"
    return (
        f"* Relevans: {evaluation.get('relevance', '-')}\n"
        f"* Sammenligning: {evaluation.get('comparison', '-')}\n"
        f"* Forklaring: {evaluation.get('explanation', '-')}\n"
        f"* Detaljegrad: {evaluation.get('detail', '-')}\n"
        f"* Robusthed: {evaluation.get('robustness', '-')}\n"
        f"* Brugervenlighed: {evaluation.get('usability', '-')}\n"
        f"* Diversitet: {evaluation.get('diversity', '-')}\n"
        f"* Pris: {evaluation.get('price', '-')}\n\n"
        f"Feedback:\n{evaluation.get('feedback', '-')}"
    )

def get_product_type():
    query = input("Hvilket produkt leder du efter? (fx 'TV', 'natcreme', 'laptop'):\n> ").strip()
    return query

def collect_user_criteria(product_type):
    # Prompter agenten til at indsamle ALLE n√∏dvendige svar fra brugeren (uden at s√∏ge produkter endnu).
    # N√•r agenten har nok, skal den udskrive alle √∏nsker i punktform og afslutte med teksten: KLAR TIL S√òGNING
    system_prompt = (
        f"Du er en venlig, grundig og kyndig dansk shopping-assistent, der hj√¶lper brugeren med at finde det bedst egnede produkt, "
        f"uanset om brugeren ved meget eller lidt om produktkategorien. \n"
        f"N√•r brugeren n√¶vner et produkt (fx '{product_type}'), skal du f√∏rst indlede en dialog med brugeren, hvor du:\n"
        f"- Stiller uddybende sp√∏rgsm√•l for at forst√• brugerens behov, erfaring og pr√¶ferencer ‚Äì typisk om hudtype, finish, allergier, prisniveau, foretrukne m√¶rker, eller andre relevante √∏nsker/krav for produktkategorien.\n"
        f"- Hvis brugeren ikke selv n√¶vner specifikke √∏nsker, skal du give konkrete eksempler p√• sp√∏rgsm√•l, og forklare kort, hvorfor de kan v√¶re vigtige at overveje (fx 'For makeup: foretr√¶kker du en mat eller glansfuld finish? Hvilken hudtype har du? Prisniveau?').\n"
        f"- G√∏r dialogen let og tryg for brugeren ‚Äì forklar kort men p√¶dagogisk hvorfor dine sp√∏rgsm√•l er relevante.\n"
        f"**VIGTIGT:** N√•r du har f√•et alle n√∏dvendige svar fra brugeren, skal du skrive et punktvist sammendrag over alle √∏nsker og krav fra brugeren, s√• det er klart hvad der skal s√∏ges efter. "
        f"Afslut derefter dit svar med teksten: KLAR TIL S√òGNING (i egen linje, gerne med store bogstaver). Du m√• ikke stille flere sp√∏rgsm√•l eller afvente mere brugerinput efter dette.\n"
        f"Du skal **ikke** g√• videre til at foresl√• produkter endnu. Kun dialog og opklaring i denne fase."
    )

    user_proxy = UserProxyAgent(
        name="User",
        human_input_mode="ALWAYS",
        code_execution_config={"use_docker": False}
    )
    assistant = AssistantAgent(
        name="ShoppingAssistant",
        llm_config=MISTRAL_LLM_CONFIG
    )
    register_function(
        search_products,
        caller=assistant,
        executor=user_proxy,
        name="search_products",
        description="S√∏g efter produkter baseret p√• s√∏geord, og returner titel, pris, butik, link og evt. andre detaljer."
    )

    # Chat indtil agenten svarer med "KLAR TIL S√òGNING"
    criteria_summary = ""
    for _ in range(12):
        chat_result = user_proxy.initiate_chat(
            assistant,
            message=system_prompt if not criteria_summary else "",
            summary_method="last_msg",
            max_turns=2
        )
        last_reply = chat_result.summary
        print("\n---\n", last_reply, "\n---\n")
        criteria_summary += last_reply + "\n"
        if "KLAR TIL S√òGNING" in last_reply.upper():
            break
    else:
        print("Kunne ikke samle brugerens √∏nsker korrekt.")
    return criteria_summary

def run_shopping_search(criteria_summary, assistant_config):
    user_proxy = UserProxyAgent(
        name="User",
        human_input_mode="TERMINATE",   # INGEN brugerinput i search/output-fasen!
        code_execution_config={"use_docker": False}
    )
    assistant = AssistantAgent(
        name="ShoppingAssistant",
        llm_config=assistant_config
    )
    register_function(
        search_products,
        caller=assistant,
        executor=user_proxy,
        name="search_products",
        description="S√∏g efter produkter baseret p√• s√∏geord, og returner titel, pris, butik, link og evt. andre detaljer."
    )
    shopping_prompt = (
        f"Her er brugerens √∏nsker og kriterier (sammendrag):\n"
        f"{criteria_summary}\n\n"
        f"Nu skal du:\n"
        f"- S√∏ge efter og sammenligne relevante produkter, der matcher brugerens kriterier. "
        f"- Vis produkter fra b√•de danske og internationale webshops. "
        f"- Hvis prisen er i USD ($) eller anden valuta, skal du omregne den til DKK og vise begge priser. "
        f"- Sammenlign altid ud fra DKK-prisen, is√¶r hvis brugeren har angivet et budget i kr. "
        f"- Vis mindst 3-5 produkter. For hvert produkt: üì¶ Navn, üí∞ Pris, üè™ Butik, üîó Link. Brug punktliste og emojis. "
        f"- Marker tydeligt din anbefaling (fx med üèÜ eller ‚ú®) og forklar kort, hvorfor du v√¶lger netop det produkt ud fra brugerens kriterier. "
        f"- Afslut samtalen med anbefalingen, uden at vente p√• mere brugerinput."
    )
    chat_result = user_proxy.initiate_chat(
        assistant,
        message=shopping_prompt,
        summary_method="last_msg",
        max_turns=8
    )
    return chat_result.summary

def main():
    product_type = get_product_type()

    # FASE 1: Indsaml brugerens krav (ALWAYS-mode)
    try:
        criteria_summary = collect_user_criteria(product_type)
    except Exception as e:
        print("\nMistral fejlede under dialog ‚Äì pr√∏ver OpenAI i stedet.\n", str(e))
        # Fallback til OpenAI
        user_proxy = UserProxyAgent(
            name="User",
            human_input_mode="ALWAYS",
            code_execution_config={"use_docker": False}
        )
        assistant = AssistantAgent(
            name="ShoppingAssistant",
            llm_config=OPENAI_LLM_CONFIG
        )
        register_function(
            search_products,
            caller=assistant,
            executor=user_proxy,
            name="search_products",
            description="S√∏g efter produkter baseret p√• s√∏geord, og returner titel, pris, butik, link og evt. andre detaljer."
        )
        criteria_summary = collect_user_criteria(product_type)

    # FASE 2: Automatisk s√∏gning og evaluering uden brugerinput
    MAX_TRIES = 3
    min_acceptable_score = 4
    shopping_prompt_used = criteria_summary

    for attempt in range(MAX_TRIES):
        print(f"\n=== Produkts√∏gning og vurdering, fors√∏g {attempt + 1} ===\n")
        try:
            agent_response = run_shopping_search(shopping_prompt_used, MISTRAL_LLM_CONFIG)
        except Exception as e:
            print("\nMistral fejlede ‚Äì fors√∏ger med OpenAI i stedet!\n", str(e))
            agent_response = run_shopping_search(shopping_prompt_used, OPENAI_LLM_CONFIG)

        print(f"\nüõçÔ∏è Agentens produktforslag:\n{agent_response}")

        evaluation = evaluate_response(shopping_prompt_used, agent_response)
        print("\nüîç Evaluering\n")
        print(format_evaluation(evaluation))

        low_scores = [v for k, v in evaluation.items()
                      if k in ['relevance', 'comparison', 'explanation', 'detail', 'robustness', 'usability', 'diversity', 'price']
                      and isinstance(v, int) and v < min_acceptable_score]
        if not low_scores:
            print("\n‚úÖ Evaluering tilfredsstillende! Slut med anbefaling.")
            break

        print("\n‚ö†Ô∏è Output ikke tilfredsstillende. Pr√∏ver igen baseret p√• feedback...\n")
        # Forbedr prompten ud fra evalueringens feedback
        shopping_prompt_used = (
            f"{shopping_prompt_used}\n\nForrige kritik fra evaluering: {evaluation['feedback']}\nForbedr dine produkts√∏gninger og anbefalinger baseret p√• denne feedback."
        )
    else:
        print("\nüö© Maks antal fors√∏g opbrugt ‚Äì sidste svar blev brugt.")

if __name__ == "__main__":
    main()
