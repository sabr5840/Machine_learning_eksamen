import os
import sys

from dotenv import load_dotenv
load_dotenv()

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from autogen import AssistantAgent, UserProxyAgent, register_function
from agent.agent_evaluation import evaluate_response
from config import MISTRAL_LLM_CONFIG, OPENAI_LLM_CONFIG
from tools.product_search import search_products

def get_user_input():
    query = input("Hvilket produkt leder du efter? (fx 'TV', 'natcreme', 'laptop'):\n> ")
    return query

def format_products(products: list) -> str:
    if not products:
        return "Ingen produkter fundet."
    formatted = []
    for i, p in enumerate(products, 1):
        formatted.append(
            f"{i}. üì¶ {p.get('title', 'Ukendt')}\n"
            f"   üí∞ Pris: {p.get('price', '-')}\n"
            f"   üè™ Butik: {p.get('store', '-')}\n"
            f"   üîó Link: {p.get('link', '-')}\n"
        )
    return "\n".join(formatted)

def format_evaluation(evaluation: dict) -> str:
    if "error" in evaluation:
        return f"Fejl i evaluering: {evaluation['error']}"
    return (
        f"* Relevans: {evaluation['relevance']}\n"
        f"* Sammenligning: {evaluation.get('comparison', '-')}\n"
        f"* Forklaring: {evaluation.get('explanation', '-')}\n"
        f"* Detaljegrad: {evaluation['detail']}\n"
        f"* Robusthed: {evaluation['robustness']}\n"
        f"* Brugervenlighed: {evaluation.get('usability', '-')}\n"
        f"* Diversitet: {evaluation.get('diversity', '-')}\n\n"
        f"Feedback:\n{evaluation['feedback']}"
    )

def run_assistant_chat(user_proxy, assistant_config, message_body, max_turns=8):
    assistant = AssistantAgent(
        name="ShoppingAssistant",
        llm_config=assistant_config
    )

    register_function(
        search_products,
        caller=assistant,
        executor=user_proxy,
        name="search_products",
        description="S√∏g efter produkter baseret p√• s√∏geord, og returner titel, pris, butik, link og evt. andre detaljer."
    )

    chat_result = user_proxy.initiate_chat(
        assistant,
        message=message_body,
        summary_method="last_msg",
        max_turns=max_turns
    )
    return chat_result.summary

def main():
    query = get_user_input()
    base_message_body = (
        f"Du er en venlig og kyndig shopping-assistent, der hj√¶lper brugeren med at finde det bedste produkt ‚Äì uanset hvor meget eller lidt brugeren selv ved om produktet."
        f"\nN√•r brugeren n√¶vner et produkt (fx '{query}'), skal du f√∏rst indlede en dialog med brugeren, hvor du:"
        "\n- Stiller uddybende sp√∏rgsm√•l for at forst√• brugerens behov, erfaring og pr√¶ferencer."
        "\n- Hvis brugeren virker usikker eller ikke selv n√¶vner specifikke √∏nsker, skal du komme med eksempler p√• relevante sp√∏rgsm√•l og forklare kort, hvorfor de kan v√¶re vigtige at overveje."
        "\nEksempel (for TV): 'Skal det bruges mest til film, gaming eller sport? Hvor stort skal det v√¶re? Hvilket budget har du? Hvilke funktioner er vigtige for dig, fx smart-TV eller s√¶rlige apps? St√∏rrelsen p√•virker oplevelsen, og dit budget afg√∏r hvilke funktioner du f√•r.'"
        "\nEksempel (for natcreme): 'Er der ingredienser, du foretr√¶kker, fx hyaluronsyre for fugt eller E-vitamin for hudbeskyttelse? Har du allergier, eller foretr√¶kker du parfumefri? Ingredienser som hyaluronsyre binder fugt til huden, mens E-vitamin beskytter mod frie radikaler.'"
        "\nHvis brugeren mangler viden om produktkategorien, s√• forklar de vigtigste ting, man typisk b√∏r overveje, p√• en letforst√•elig m√•de ‚Äì ogs√• hvorfor det er vigtigt."
        "\nN√•r du har nok information, brug 'search_products'-v√¶rkt√∏jet til at hente de mest relevante produkter, sammenlign dem ud fra brugerens kriterier, og giv en personlig anbefaling med en kort begrundelse."
        "\nN√•r du sammenligner produkterne, lav altid en punktliste ‚Äì brug gerne emojis til at vise egenskaber og g√∏re listen let at l√¶se."
        "\nFor hvert produkt skal du vise fx: üì¶ Navn, üí∞ Pris, üè™ Butik, ‚≠ê Vigtige egenskaber. Marker din anbefaling tydeligt ‚Äì fx med üèÜ eller ‚ú® og forklar dit valg i 2-3 korte linjer."
        "\nBrug korte, tydelige s√¶tninger, og g√∏r det nemt at sammenligne produkterne."
        "\nAfslut f√∏rst, n√•r brugeren er tilfreds. Stil gerne opklarende sp√∏rgsm√•l undervejs."
    )

    user_proxy = UserProxyAgent(
        name="User",
        human_input_mode="ALWAYS",   # <-- Nu med brugerinput!
        code_execution_config=False
    )

    MAX_TRIES = 3
    min_acceptable_score = 4

    message_body = base_message_body

    for attempt in range(MAX_TRIES):
        print(f"\n=== Fors√∏g {attempt + 1} (Mistral f√∏rst, s√• evt. OpenAI) ===\n")
        try:
            agent_response = run_assistant_chat(
                user_proxy, MISTRAL_LLM_CONFIG, message_body
            )
        except Exception as e:
            print("\nMistral fejlede ‚Äì fors√∏ger med OpenAI i stedet!\n", str(e))
            try:
                agent_response = run_assistant_chat(
                    user_proxy, OPENAI_LLM_CONFIG, message_body
                )
            except Exception as e2:
                print("\nOpenAI fejlede ogs√•:\n", str(e2))
                print("Afslutter.")
                return

        print(f"\nüõçÔ∏è Agentens svar (fors√∏g {attempt + 1}):\n")
        print(agent_response)

        evaluation = evaluate_response(message_body, agent_response)
        print("\nüîç Evaluering\n")
        print(format_evaluation(evaluation))

        low_scores = [v for k, v in evaluation.items()
                      if k in ['relevance', 'comparison', 'explanation', 'detail', 'robustness', 'usability', 'diversity']
                      and isinstance(v, int) and v < min_acceptable_score]
        if not low_scores:
            print("\n‚úÖ Evaluering tilfredsstillende! Slut.")
            break

        print("\n‚ö†Ô∏è Output ikke tilfredsstillende. Pr√∏ver igen baseret p√• feedback...\n")
        message_body = (
            base_message_body +
            f"\n\n‚ö†Ô∏è Forrige kritik fra evaluering: {evaluation['feedback']}\nForbedr dit svar baseret p√• denne kritik."
        )
    else:
        print("\nüö© Maks antal fors√∏g opbrugt ‚Äì sidste svar blev brugt.")

if __name__ == "__main__":
    main()
